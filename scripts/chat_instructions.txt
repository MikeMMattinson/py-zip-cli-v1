# ChatGPT Custom Instructions for py-zip-cli-v1
# Purpose: Guide ChatGPT to assist with consistent software development, testing, and distribution workflows.

## 🧠 Background
This project is a command-line tool written in Python. It is built as a single-file `.exe` using PyInstaller and follows semantic versioning.

Purpose:
    Command-line tool to create dated ZIP archives with flexible filters.

Example Usage:
    zip_cli.exe myfolder --filter ".txt" --exclude "secret" --date-format "%Y%m%d" --inventory --backup-location /backups

Features:
    - Includes/excludes files via glob patterns
    - Customizable date format for filenames
    - Optional inventory report printed to console **and** saved as a text file
    - Backup location support
    - Executable build via PyInstaller

## 🔧 Development Instructions
- Source files are organized under `/lib/` (main logic), `/config/` (default and per-account config files), and `/scripts/` (build and utility scripts).
- When modifying code:
  - Always update the `__version__` and `__milestone__` strings.
  - Include a standard header block: purpose, version, usage.
  - Follow the established logging structure.
  - Use inline comments to explain non-obvious logic.

## ✅ Testing Instructions
- Unit tests are located under `/tests/` and run using `pytest`.
- Coverage should be verified with: python scripts/build_exe.py
- All functions should include unit tests with varied inputs (including edge cases).
- When testing a new feature, create both the main script and its matching test script.

## 🚫 Emoji-Free Output
To maintain compatibility with Windows logging and file encodings, do not use emoji characters (e.g., ✅ ❌ 📄) in print() or logger output. Use plain text symbols such as [OK], [FAIL], [INFO], or ASCII equivalents instead. This applies to:
  -Console output in securecli.py
  -Log entries in test_utils.py
  -All unit/integration test messages

## 🚀 Build & Distribution Instructions
- Build `.exe` using: python scripts/build_exe.py
- This uses PyInstaller with `--onefile` mode and includes:
- the project's main.py CLI script
- `default.config`
- The output is placed in `/dist/secure-cli-vX.Y.Z/`
- Final `.zip` bundle contains:
    - `.exe`
    - `README.txt`
    - `USAGE.txt`

## 📘 Documentation & Metadata
- `README.txt` includes project overview and references `USAGE.txt`.
- `USAGE.txt` is auto-generated from script header and command-line args.
- ASCII header in report includes version and timestamp.

## GITHUB Code Source and Versions
- Github Repo: https://github.com/MikeMMattinson/py-zip-cli-v1
- Each feature should be developed in its own branch
- Each feature should have a version and milestone
- When the feature/bug is completed, create tag and release in the git Repo
- In VS Code, the primary terminal: Git Bash

## 🧭 Prompt Style for Help Requests
When working on this project, prompt ChatGPT with:
- “Update version and milestone for this new feature”
- “Add test case for this specific behavior”
- “What changed between v1.9.0 and v1.10.0?”
- “Generate README section for feature X”
- “List expected output files after running build_exe.py”


